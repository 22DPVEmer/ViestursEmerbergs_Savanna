@page
@using Savanna.Web.Pages
@model DashboardModel
@{
    ViewData["Title"] = "Savanna Game";
}

<div class="container-fluid py-4">
    <!-- User Authentication Status -->
    <div class="mb-4">
        @if (User.Identity?.IsAuthenticated == true)
        {
            <div class="d-flex justify-content-between align-items-center">
                <span>Welcome, @User.Identity.Name!</span>
                <form method="post" asp-page="/Account/Logout">
                    <button type="submit" class="btn btn-outline-secondary btn-sm">Logout</button>
                </form>
            </div>
        }
        else
        {
            <a href="/Account/Login" class="btn btn-primary">Login to Save Progress</a>
        }
    </div>

    <div class="row">
        <!-- Game Grid Column -->
        <div class="col-lg-8">
            <!-- Game Header -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="card-title mb-0">Savanna Game</h2>
                            <p class="card-text mb-0" id="gameStatus">Iteration: <span id="iterationCounter">0</span></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Game Controls -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Game Controls</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex flex-column gap-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group" role="group">
                                <button id="startGame" class="btn btn-success">
                                    <i class="bi bi-play-fill"></i> Start Game
                                </button>
                                <button id="pauseGame" class="btn btn-warning" disabled>
                                    <i class="bi bi-pause-fill"></i> Pause Game
                                </button>
                                <button id="quitGame" class="btn btn-danger" disabled>
                                    <i class="bi bi-x-circle"></i> Quit Game
                                </button>
                                <button id="saveGame" class="btn btn-primary" disabled>
                                    <i class="bi bi-save"></i> Save Game
                                </button>
                            </div>
                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="displayMode" id="iconMode" autocomplete="off" checked>
                                <label class="btn btn-outline-primary" for="iconMode">Icons</label>
                                <input type="radio" class="btn-check" name="displayMode" id="textMode" autocomplete="off">
                                <label class="btn btn-outline-primary" for="textMode">Text</label>
                            </div>
                        </div>
                        <div>
                            <h6 class="mb-2">Add Animals</h6>
                            <div id="animalControls" class="d-flex gap-2 flex-wrap">
                                <!-- Animal buttons will be added here dynamically -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Game Grid -->
            <div class="card">
                <div class="card-body p-0">
                    <div id="gameGrid" class="game-grid position-relative">
                        <!-- Game grid will be rendered here by JavaScript -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Game Info Column -->
        <div class="col-lg-4">
            <!-- Game Statistics -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Game Statistics</h5>
                </div>
                <div class="card-body">
                    <div id="animalStats" class="list-group list-group-flush">
                        <!-- Animal statistics will be added here dynamically -->
                    </div>
                </div>
            </div>

            <!-- Saved Games -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Saved Games</h5>
                    <button id="refreshSaves" class="btn btn-sm btn-outline-secondary">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                <div class="card-body p-0">
                    <div id="savedGames" class="list-group list-group-flush">
                        <!-- Saved games will be loaded here dynamically -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .game-grid {
            aspect-ratio: 1;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            display: grid;
            gap: 1px;
            padding: 1px;
        }

        .game-cell {
            background-color: white;
            border: 1px solid #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .game-cell.lion { color: #dc3545; }
        .game-cell.antelope { color: #198754; }
        .game-cell.tiger { color: #fd7e14; }
        .game-cell.zebra { color: #6c757d; }

        @@media (min-width: 768px) {
            .game-grid {
                max-width: 800px;
                margin: 0 auto;
            }
        }
    </style>
}

@section Scripts {
    <script src="~/js/game/uiManager.js"></script>
    <script src="~/js/game/gameState.js"></script>
    <script src="~/js/game/gameControls.js"></script>
    <script src="~/js/game/animalManager.js"></script>
    <script src="~/js/game/saveManager.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize all game components
            async function initializeGame() {
                // Initialize game grid
                const grid = document.getElementById('gameGrid');
                if (grid) {
                    grid.style.gridTemplateColumns = `repeat(20, 1fr)`;
                    for (let i = 0; i < 400; i++) {
                        const cell = document.createElement('div');
                        cell.className = 'game-cell';
                        cell.dataset.x = i % 20;
                        cell.dataset.y = Math.floor(i / 20);
                        grid.appendChild(cell);
                    }
                }

                // Initialize display mode
                const iconModeElement = document.getElementById('iconMode');
                const textModeElement = document.getElementById('textMode');
                
                if (iconModeElement && textModeElement) {
                    if (gameState.displayMode === 'icons') {
                        iconModeElement.checked = true;
                    } else {
                        textModeElement.checked = true;
                    }

                    document.querySelectorAll('input[name="displayMode"]').forEach(input => {
                        input.addEventListener('change', function() {
                            if (gameState.gameActive) {
                                input.checked = !input.checked;
                                return;
                            }
                            gameState.displayMode = this.id === 'iconMode' ? 'icons' : 'text';
                            localStorage.setItem('displayMode', gameState.displayMode);
                        });
                    });
                }

                // Initialize animals
                await animalManager.initializeAnimalButtons();
                await animalManager.initializeAnimalStats();

                // Set up event listeners
                setupEventListeners();

                // Load saved games
                console.log('Initial load of saved games');
                await saveManager.loadSavedGames();
            }

            // Setup event listeners
            function setupEventListeners() {
                // Warn about unsaved changes
                window.onbeforeunload = function(e) {
                    if (gameState.hasUnsavedChanges) {
                        e.preventDefault();
                        return "You have unsaved changes. Are you sure you want to leave?";
                    }
                };

                // Game control buttons
                document.getElementById('startGame')?.addEventListener('click', () => gameControls.startGame());
                document.getElementById('quitGame')?.addEventListener('click', () => gameControls.quitGame());
                document.getElementById('saveGame')?.addEventListener('click', () => saveManager.saveGame());
                document.getElementById('pauseGame')?.addEventListener('click', () => gameControls.togglePause());
                document.getElementById('refreshSaves')?.addEventListener('click', () => saveManager.loadSavedGames());
            }

            // Initialize the game
            initializeGame();
        });
    </script>
} 
} 
} 
} 